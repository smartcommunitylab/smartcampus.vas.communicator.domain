package smartcampus.services.communicator;

import it.sayservice.platform.compiler.domain.model.annotations.ServiceNotification;
import it.sayservice.platform.compiler.domain.model.annotations.Service;
import it.sayservice.platform.compiler.domain.model.annotations.Subscription;
import it.sayservice.platform.compiler.domain.model.annotations.Local;
import it.sayservice.platform.compiler.domain.model.annotations.Process;

import smartcampus.smartplanner.data.message.alerts.Alert;
import smartcampus.smartplanner.data.message.alerts.AlertAccident;
import smartcampus.smartplanner.data.message.alerts.AlertDelay;
import smartcampus.smartplanner.data.message.alerts.AlertParking;
import smartcampus.smartplanner.data.message.alerts.AlertStrike;

import smartcampus.services.communicator.beans.ActionDescriptor;
import smartcampus.services.communicator.beans.Notification;
import smartcampus.services.communicator.beans.JourneyPlannerParameters;
import smartcampus.services.communicator.beans.UnitnNewsParameters;
import smartcampus.services.communicator.beans.UnitnNews;

import smartcampus.services.communicator.helpers.JourneyPlannerHelper;
import smartcampus.services.communicator.helpers.UnitnNewsHelper;


import smartcampus.services.journeyplanner.*;

import smartcampus.service.unitnnews.data.message.Unitnnews;

import java.util.Map;

DomainObject AbstractFunnelFactory {
	@Local(actionName="createFunnel")
    operation createFunnel(userId:String,userSocialId:String,title:String,sourceType:String,labels:String[],actions:ActionDescriptor[],funnelData:String);

	@Local(actionName="createDefaultFunnel")
    operation createDefaultFunnel(userId:String,userSocialId:String);
    
   action createFunnel(userId:String,userSocialId:String,title:String,sourceType:String,labels:String[],actions:ActionDescriptor[],funnelData:String) {
		create AbstractFunnel(userId:userId,userSocialId:userSocialId,title:title,sourceType:sourceType,labels:labels,actions:actions);
	}
	
   action createDefaultFunnel(userId:String,userSocialId:String) {
		create AbstractFunnel(userId:userId,userSocialId:userSocialId);
	}	
}

DomainType AbstractFunnel {

	port update(userId:String, notifications: Notification[]);

	public immutable var userId : String;
	public immutable var userSocialId : String;
	
	public var id : String;

	public var title : String;	
	public var sourceType : String;
	public var labels : String[];
	public var actions : ActionDescriptor[];

}

// JP

DomainObject JourneyPlannerFunnelFactory implements AbstractFunnelFactory {
	@Local(actionName="createFunnel")
    operation createFunnel(userId:String,userSocialId:String,title:String,sourceType:String,labels:String[],actions:ActionDescriptor[],funnelData:String);
    
   action createFunnel(userId:String,userSocialId:String,title:String,sourceType:String,labels:String[],actions:ActionDescriptor[],funnelData:String) {
   		pars : JourneyPlannerParameters = JourneyPlannerParameters.fromJSON(funnelData);
		create JourneyPlannerFunnel(userId:userId,userSocialId:userSocialId,title:title,sourceType:sourceType,labels:labels,actions:actions,parameters:pars);
	}
}

DomainType JourneyPlannerFunnel implements AbstractFunnel {

	private var parameters : JourneyPlannerParameters;

    action notifyAlert(alert:Alert,userId:String) {
		notifications : Notification[] = JourneyPlannerHelper.buildNotification(alert,id,parameters);
		publish update(userId,notifications);
    }
    
	action initialize() {
		set sourceType = "JourneyPlanner";
		set id = userId + "_" + System.currentTimeMillis();
	}
	
	subscribe ItineraryObject!alertDelay() if (this.userId == userId) => notifyAlert(alert,userId);
	subscribe ItineraryObject!alertStrike()  if (this.userId == userId) =>  notifyAlert(alert,userId);
	subscribe ItineraryObject!alertParking() if (this.userId == userId) =>  notifyAlert(alert,userId);	
	
}

// UNITN

DomainObject UnitnFunnelFactory implements AbstractFunnelFactory {
	@Local(actionName="createFunnel")
    operation createFunnel(userId:String,userSocialId:String,title:String,sourceType:String,labels:String[],actions:ActionDescriptor[],funnelData:String);
    
	@Local(actionName="createDefaultFunnel")
    operation createDefaultFunnel(userId:String,userSocialId:String);    
    
   action createFunnel(userId:String,userSocialId:String,title:String,sourceType:String,labels:String[],actions:ActionDescriptor[],funnelData:String) {
   		pars : UnitnNewsParameters = UnitnNewsParameters.fromJSON(funnelData);
		create UnitnFunnel(userId:userId,userSocialId:userSocialId,title:title,sourceType:sourceType,labels:labels,actions:actions,parameters:pars);
	}
	
   action createDefaultFunnel(userId:String,userSocialId:String) {
		create UnitnFunnel(userId:userId,userSocialId:userSocialId);
	}		
	
	
}

DomainType UnitnFunnel implements AbstractFunnel {

	private var parameters : UnitnNewsParameters;

    action notifyNews(news:UnitnNews[]) {
    	notifications : Notification[] = UnitnNewsHelper.buildNotification(news,id,parameters);
		publish update(userId,notifications);
    }
    
	action initialize() {
		set sourceType = "UnitnNews";
		set id = userId + "_" + System.currentTimeMillis();
	}    

    subscribe GetNews!updateOpera() => notifyNews(data);
    subscribe GetNews!updateCisca() => notifyNews(data);
    subscribe GetNews!updateUnitn() => notifyNews(data);

}

// UNITN NEWS

DomainObject GetNews {
    
    @ServiceNotification(serviceId="smartcampus.service.unitnnews", methodName="GetOperaNews", converter="smartcampus.services.communicator.helpers.UnitnNewsDataConverter")
    port updateOpera(data : UnitnNews[]);
    
    @ServiceNotification(serviceId="smartcampus.service.unitnnews", methodName="GetCiscaNews", converter="smartcampus.services.communicator.helpers.UnitnNewsDataConverter")
    port updateCisca(data : UnitnNews[]);
    
    @ServiceNotification(serviceId="smartcampus.service.unitnnews", methodName="GetUnitnNews", converter="smartcampus.services.communicator.helpers.UnitnNewsDataConverter")
    port updateUnitn(data : UnitnNews[]);        

    @Subscription(serviceId="smartcampus.service.unitnnews", methodName="GetOperaNews")
    operation subscribeOperaNews();
    
    @Subscription(serviceId="smartcampus.service.unitnnews", methodName="GetCiscaNews")
    operation subscribeCiscaNews();    
    
    @Subscription(serviceId="smartcampus.service.unitnnews", methodName="GetUnitnNews")
    operation subscribeUnitnNews(baseurl:String,variableurl:String,source:String);        
    
    action initialize() {
        invoke subscribeOperaNews();
        invoke subscribeCiscaNews();
        invoke subscribeUnitnNews("http://www.unitn.it","ateneo","ateneo");
        invoke subscribeUnitnNews("http://www.unitn.it","scienze","scienze");
        invoke subscribeUnitnNews("http://www.unitn.it","ingegneria","ingegneria");
        invoke subscribeUnitnNews("http://www.unisport.tn.it","","unisport");               
    }
}


